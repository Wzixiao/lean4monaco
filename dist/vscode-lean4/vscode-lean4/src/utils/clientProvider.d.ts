import { LeanFileProgressProcessingInfo, ServerStoppedReason } from '@leanprover/infoview-api';
import { Disposable, OutputChannel, TextDocument } from 'vscode';
import { BaseLanguageClient, LanguageClientOptions } from 'vscode-languageclient/node';
import { PreconditionCheckResult } from '../diagnostics/setupNotifs';
import { LeanClient } from '../leanclient';
import { ExtUri } from './exturi';
import { LeanInstaller } from './leanInstaller';
export declare class LeanClientProvider implements Disposable {
    private checkLean4ProjectPreconditions;
    private setupClient;
    private subscriptions;
    private outputChannel;
    private installer;
    private clients;
    private pending;
    private pendingInstallChanged;
    private processingInstallChanged;
    private activeClient;
    private progressChangedEmitter;
    progressChanged: import("vscode").Event<[string, LeanFileProgressProcessingInfo[]]>;
    private clientAddedEmitter;
    clientAdded: import("vscode").Event<LeanClient>;
    private clientRemovedEmitter;
    clientRemoved: import("vscode").Event<LeanClient>;
    private clientStoppedEmitter;
    clientStopped: import("vscode").Event<[LeanClient, boolean, ServerStoppedReason]>;
    constructor(installer: LeanInstaller, outputChannel: OutputChannel, checkLean4ProjectPreconditions: (channel: OutputChannel, folderUri: ExtUri) => Promise<PreconditionCheckResult>, setupClient: (clientOptions: LanguageClientOptions, folderUri: ExtUri, elanDefaultToolchain: string) => Promise<BaseLanguageClient>);
    getActiveClient(): LeanClient | undefined;
    private onInstallChanged;
    private restartFile;
    private stopActiveClient;
    private restartActiveClient;
    clientIsStarted(): void;
    didOpenEditor(document: TextDocument): Promise<void>;
    findClient(path: ExtUri): LeanClient | undefined;
    getClients(): LeanClient[];
    getClientForFolder(folder: ExtUri): LeanClient | undefined;
    ensureClient(uri: ExtUri): Promise<[boolean, LeanClient | undefined]>;
    dispose(): void;
}
